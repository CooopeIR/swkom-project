<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SWKOM</name>
    </assembly>
    <members>
        <member name="T:SWKOM.BusinessLogic.DocumentProcessor">
            <summary>
            DocumentProcessor class with functions to process uploaded document
            </summary>
        </member>
        <member name="M:SWKOM.BusinessLogic.DocumentProcessor.#ctor">
            <summary>
            Constructor for DocumentProcessor class
            </summary>
        </member>
        <member name="M:SWKOM.BusinessLogic.DocumentProcessor.ProcessDocument(SWKOM.DTO.DocumentItemDTO)">
            <summary>
            Process document function to get information (content, file name, content type, filesize uploaded date) out of uploaded document into single variables
            </summary>
            <param name="documentItemDTO"></param>
            <returns>Updated DocumentItemDTO element with information in single variables</returns>
        </member>
        <member name="T:SWKOM.BusinessLogic.IDocumentProcessor">
            <summary>
            Interface IDocumentProcessor for DocumentProcessor functions; functions to process uploaded document
            </summary>
        </member>
        <member name="M:SWKOM.BusinessLogic.IDocumentProcessor.ProcessDocument(SWKOM.DTO.DocumentItemDTO)">
            <summary>
            Interface: Process document function to get information (content, file name, content type, filesize uploaded date) out of uploaded document into single variables
            </summary>
            <param name="documentItemDTO"></param>
            <returns>Updated DocumentItemDTO element with information in single variables</returns>
        </member>
        <member name="T:SWKOM.Controllers.DocumentController">
            <summary>
            Document Controller of SWKOM (REST Service) methods (create, get, get by id, delete)
            </summary>
        </member>
        <member name="M:SWKOM.Controllers.DocumentController.#ctor(Microsoft.Extensions.Logging.ILogger{SWKOM.Controllers.DocumentController},AutoMapper.IMapper,System.Net.Http.IHttpClientFactory,SWKOM.BusinessLogic.IDocumentProcessor,SWKOM.Services.IMessageQueueService,SWKOM.Services.IFileService)">
            <summary>
            Constructor for DocumentController class, assigning local variables
            </summary>
            <param name="logger">ILogger(DocumentController) logger</param>
            <param name="mapper">IMapper mapper</param>
            <param name="httpClientFactory">IHttpClientFactory httpClientFactory</param>
            <param name="documentProcessor">IDocumentProcessor documentProcessor</param>
            <param name="messageQueueService">IMessageQueueService messageQueueService</param>
            <param name="fileService"></param>
        </member>
        <member name="M:SWKOM.Controllers.DocumentController.Create(SWKOM.DTO.DocumentItemDTO)">
            <summary>
            Post a document to save in the database with title, author and uploaded file (Pre-Processing with validation,save-request to DAL, document sent to RabbitMQ)
            </summary>
            <param name="documentDTO"></param>
            <returns>Successful status code with document name and id or error status code</returns>
        </member>
        <member name="M:SWKOM.Controllers.DocumentController.Get(System.String)">
            <summary>
            Get all documents from the database
            </summary>
            <param name="search"></param>
            <returns>Success status code with list of DocumentItems or error status code</returns>
        </member>
        <member name="M:SWKOM.Controllers.DocumentController.GetDocumentById(System.Int32)">
            <summary>
            Get a specific document from the database with the ID of the document
            </summary>
            <param name="id"></param>
            <returns>Success status code with DocumentItem with specified id or error status code</returns>
        </member>
        <member name="M:SWKOM.Controllers.DocumentController.Delete(System.Int32)">
            <summary>
            Delete a specific document from the database with the ID of the document
            </summary>
            <param name="id"></param>
            <returns>Success status code for deletion of DocumentItem with specified id or error status code</returns>
        </member>
        <member name="T:SWKOM.Controllers.SearchController">
            <summary>
            Controller which handles search requests (fuzzy search, querystring search => allow for 2 errors or exact match)
            Optional: Search also in OCR Text of indexed documents
            </summary>
        </member>
        <member name="M:SWKOM.Controllers.SearchController.#ctor(Microsoft.Extensions.Logging.ILogger{SWKOM.Controllers.SearchController},AutoMapper.IMapper,SWKOM.Services.ISearchService)">
            <summary>
            Search Controller constructor, which assigns logger, mapper and searchService from Dependency Injection
            </summary>
            <param name="logger"></param>
            <param name="mapper"></param>
            <param name="searchService"></param>
        </member>
        <member name="M:SWKOM.Controllers.SearchController.SearchByQueryString(SWKOM.DTO.SearchRequest)">
            <summary>
            Wildcard-Search (QueryString)
            </summary>
            <param name="request"></param>
            <returns>ActionResult: 200 OK or 404 not found or 500 failed to search documents</returns>
        </member>
        <member name="M:SWKOM.Controllers.SearchController.SearchByFuzzy(SWKOM.DTO.SearchRequest)">
            <summary>
            Fuzzy-Search with Match(Normalisation)
            </summary>
            <param name="request">SearchRequest request</param>
            <returns>ActionResult: 200 OK or 404 not found or 500 failed to search documents</returns>
        </member>
        <member name="T:SWKOM.DTO.Document">
            <summary>
            Structure with necessary elements for a DocumentItem element (id, title, author, DocumentContent element, DocumentMetadata element, ocr text)
            </summary>
        </member>
        <member name="P:SWKOM.DTO.Document.Id">
            <summary>
            ID of DocumentItem element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.Document.Title">
            <summary>
            Entered title by user
            </summary>
        </member>
        <member name="P:SWKOM.DTO.Document.Author">
            <summary>
            Entered author by user
            </summary>
        </member>
        <member name="P:SWKOM.DTO.Document.OcrText">
            <summary>
            Generated OCR Text
            </summary>
        </member>
        <member name="T:SWKOM.DTO.DocumentContentDTO">
            <summary>
            Structure with necessary elements for a DocumentContentDTO element (id, filename, content type, content, document id)
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentContentDTO.Id">
            <summary>
            ID of DocumentContentDTO element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentContentDTO.FileName">
            <summary>
            File Name of Document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentContentDTO.ContentType">
            <summary>
            Content Type of Document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentContentDTO.Content">
            <summary>
            Content of Document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentContentDTO.DocumentId">
            <summary>
            ID of Document
            </summary>
        </member>
        <member name="T:SWKOM.DTO.DocumentItemDTO">
            <summary>
            Structure with necessary elements for a DocumentItemDTO element (id, title, author, uploaded file, DocumentContentDto element, DocumentMetadataDto element, ocr text)
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.Id">
            <summary>
            ID of DocumentItem element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.Title">
            <summary>
            Entered title by user
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.Author">
            <summary>
            Entered author by user
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.UploadedFile">
            <summary>
            Uploaded document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.DocumentContentDto">
            <summary>
            Document Content element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.DocumentMetadataDto">
            <summary>
            Document Metadata element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentItemDTO.OcrText">
            <summary>
            Generated OCR Text
            </summary>
        </member>
        <member name="T:SWKOM.DTO.DocumentMetadataDTO">
            <summary>
            Structure with necessary elements for a DocumentMetadataDTO element (id, upload date, filesize, document id)
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentMetadataDTO.Id">
            <summary>
            ID of DocumentMetadata element
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentMetadataDTO.UploadDate">
            <summary>
            Upload Date of document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentMetadataDTO.FileSize">
            <summary>
            Filesize of uploaded document
            </summary>
        </member>
        <member name="P:SWKOM.DTO.DocumentMetadataDTO.DocumentId">
            <summary>
            ID of Document
            </summary>
        </member>
        <member name="T:SWKOM.DTO.SearchRequest">
            <summary>
            string SearchTerm and bool IncludeOcr for searching
            </summary>
        </member>
        <member name="P:SWKOM.DTO.SearchRequest.SearchTerm">
            <summary>
            string SearchTerm with getter and setter
            </summary>
        </member>
        <member name="P:SWKOM.DTO.SearchRequest.IncludeOcr">
            <summary>
            bool IncludeOcr with getter and setter
            </summary>
        </member>
        <member name="T:SWKOM.Mappings.MappingProfile">
            <summary>
            Mapping Profiles for datastructures between SWKOM and DocumentDAL
            </summary>
        </member>
        <member name="M:SWKOM.Mappings.MappingProfile.#ctor">
            <summary>
            Mapping Profile for variables from and to DocumentItem and DocumentItemDTO, DocumentContent and DocumentContentDTO, DocumentMetadata and DocumentMetadataDTO
            </summary>
        </member>
        <member name="T:SWKOM.Services.FileService">
            <summary>
            Service which handles File Upload, Download and Deletion from MinIO Microservice
            </summary>
        </member>
        <member name="M:SWKOM.Services.FileService.#ctor">
            <summary>
            Constructor, which instantiates a new MinIO Client for file operations
            </summary>
        </member>
        <member name="M:SWKOM.Services.FileService.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads a file to MinIO Microservice
            </summary>
            <param name="file"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:SWKOM.Services.FileService.DownloadFileAsync(System.String)">
            <summary>
            Downloads a file from MinIO Microservice asynchrono
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SWKOM.Services.FileService.DeleteFileAsync(System.String)">
            <summary>
            Deletes a file from MinIO Microservice
            </summary>
            <param name="fileName"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:SWKOM.Services.IFileService">
            <summary>
            Interface for FileService, making sure Upload, Download and Delete Methods are provided
            </summary>
        </member>
        <member name="M:SWKOM.Services.IFileService.UploadFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Upload a IFormFile which was submitted from a Form on the Web to MinIO Microservice
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:SWKOM.Services.IFileService.DownloadFileAsync(System.String)">
            <summary>
            Download a File from MinIO Microservice asynchronously
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:SWKOM.Services.IFileService.DeleteFileAsync(System.String)">
            <summary>
            Delete a File from MinIO Microservice asynchronously
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:SWKOM.Services.IMessageQueueService">
            <summary>
            Interface IMessageQueueService for MessageQueueService;
            Connection management functions for RabbitMQ
            </summary>
        </member>
        <member name="P:SWKOM.Services.IMessageQueueService.Connection">
            <summary>
            IConnection Connection to set and get private _connection variable
            </summary>
        </member>
        <member name="M:SWKOM.Services.IMessageQueueService.ConnectToRabbitMQ">
            <summary>
            Interface: Tries to open a connection to RabbitMQ, creates queues for ocr_result_queue and indexing_queue
            </summary>
            <returns>Task.CompletedTask</returns>
            <exception cref="T:System.Exception">Connection failure with RabbitMQ</exception>
        </member>
        <member name="M:SWKOM.Services.IMessageQueueService.SendToFileQueue(System.String)">
            <summary>
            Interface: Send message to RabbitMQ file queue
            </summary>
            <param name="message">type: string</param>
        </member>
        <member name="M:SWKOM.Services.IMessageQueueService.SendToIndexingQueue(DocumentDAL.Entities.DocumentItem)">
            <summary>
            Interface: Send DocumentItem to Indexing queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:SWKOM.Services.ISearchService">
            <summary>
            Interface for Search Service, making sure FuzzySearch and QueryStringSearch methods are implemented
            </summary>
        </member>
        <member name="M:SWKOM.Services.ISearchService.FuzzySearchAsync(SWKOM.DTO.SearchRequest)">
            <summary>
            Method to FuzzySearch in ElasticSearch indexed documents
            </summary>
            <param name="searchTerm"></param>
            <returns></returns>
        </member>
        <member name="M:SWKOM.Services.ISearchService.QueryStringSearchAsync(SWKOM.DTO.SearchRequest)">
            <summary>
            Method to Exact Match Search in ElasticSearch indexed documents
            </summary>
            <param name="searchTerm"></param>
            <returns></returns>
        </member>
        <member name="T:SWKOM.Services.MessageQueueService">
            <summary>
            Connection management functions for RabbitMQ
            </summary>
        </member>
        <member name="P:SWKOM.Services.MessageQueueService.Connection">
            <summary>
            IConnection Connection to set and get private _connection variable
            </summary>
        </member>
        <member name="M:SWKOM.Services.MessageQueueService.#ctor(RabbitMQ.Client.IConnectionFactory)">
            <summary>
            Constructor for MessageQueueService, which initializes a Connection to RabbitMQ. This connection is shared across other servcies, e.g. RabbitMQListenerService
            </summary>
            <param name="connectionFactory"></param>
        </member>
        <member name="M:SWKOM.Services.MessageQueueService.ConnectToRabbitMQ">
            <summary>
            Tries to open a connection to RabbitMQ, creates queues for ocr_result_queue and indexing_queue
            </summary>
            <returns>Task.CompletedTask</returns>
            <exception cref="T:System.Exception">Connection failure with RabbitMQ</exception>
        </member>
        <member name="M:SWKOM.Services.MessageQueueService.SendToFileQueue(System.String)">
            <summary>
            Send message to RabbitMQ file queue
            </summary>
            <param name="message">type: string</param>
        </member>
        <member name="M:SWKOM.Services.MessageQueueService.SendToIndexingQueue(DocumentDAL.Entities.DocumentItem)">
            <summary>
            Send DocumentItem to Indexing queue
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SWKOM.Services.MessageQueueService.Dispose">
            <summary>
            Close connection to RabbitMQ
            </summary>
        </member>
        <member name="T:SWKOM.Services.RabbitMqListenerService">
            <summary>
            RabbitMQ management functions (start connection, close connection, connect to RabbitMQ, start listening)
            </summary>
        </member>
        <member name="M:SWKOM.Services.RabbitMqListenerService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Start connection and listening RabbitMQ
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:SWKOM.Services.RabbitMqListenerService.#ctor(System.Net.Http.IHttpClientFactory,SWKOM.Services.IMessageQueueService)">
            <summary>
            Constructor for RabbitMqListenerService class; initialization of variables
            </summary>
            <param name="httpClientFactory">IHttpClientFactory httpClientFactory</param>
            <param name="messageQueueService">IMessageQueueService messageQueueService</param>
        </member>
        <member name="M:SWKOM.Services.RabbitMqListenerService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Close channel and connection of RabbitMQ
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:SWKOM.Services.SearchService">
            <summary>
            Service to Search for documents in ElasticSearch Microservice
            </summary>
        </member>
        <member name="M:SWKOM.Services.SearchService.#ctor(Elastic.Clients.Elasticsearch.ElasticsearchClient)">
            <summary>
            Constructor for SearchService assigning searchClient from Dependency Injection
            </summary>
            <param name="searchClient"></param>
        </member>
        <member name="M:SWKOM.Services.SearchService.FuzzySearchAsync(SWKOM.DTO.SearchRequest)">
            <summary>
            Fuzzy Searching through all documents indexed in ElasticSearch
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:SWKOM.Services.SearchService.QueryStringSearchAsync(SWKOM.DTO.SearchRequest)">
            <summary>
            Exact Match Searching through all documents indexed in ElasticSearch
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:SWKOM.Validators.DocumentItemDtoValidator">
            <summary>
            Validator with conditions for user input fields (title, author, uploaded file)
            </summary>
        </member>
        <member name="M:SWKOM.Validators.DocumentItemDtoValidator.#ctor">
            <summary>
            Validator conditions for user input fields (title, author, uploaded file)
            </summary>
        </member>
    </members>
</doc>
